// <auto-generated />
using System;
using LaptopMart.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LaptopMart.Migrations
{
    [DbContext(typeof(LapShopContext))]
    [Migration("20220909134435_update-orderItems")]
    partial class updateorderItems
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LaptopMart.Models.BusinessInfo", b =>
                {
                    b.Property<int>("businessInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("budget")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("businessCardNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("customerId")
                        .HasColumnType("int");

                    b.Property<string>("officePhone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("businessInfoId");

                    b.HasIndex(new[] { "customerId" }, "IX_TbBusinessInfo_CutomerId")
                        .IsUnique();

                    b.ToTable("TbBusinessInfo");
                });

            modelBuilder.Entity("LaptopMart.Models.CashTransacion", b =>
                {
                    b.Property<int>("cashTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("cashDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("cashValue")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("customerId")
                        .HasColumnType("int");

                    b.HasKey("cashTransactionId");

                    b.ToTable("TbCashTransacion");
                });

            modelBuilder.Entity("LaptopMart.Models.Category", b =>
                {
                    b.Property<int>("categoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<DateTime>("createdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<int>("currentState")
                        .HasColumnType("int");

                    b.Property<string>("imageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("showInHomePage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("(CONVERT([bit],(0)))");

                    b.Property<string>("updatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("categoryId");

                    b.ToTable("TbCategories");
                });

            modelBuilder.Entity("LaptopMart.Models.Customer", b =>
                {
                    b.Property<int>("customerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("customerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("customerId");

                    b.ToTable("TbCustomers");
                });

            modelBuilder.Entity("LaptopMart.Models.Item", b =>
                {
                    b.Property<int>("itemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("categoryId")
                        .HasColumnType("int");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<DateTime>("createdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('2020-09-20T00:00:00.0000000')");

                    b.Property<int>("currentState")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gpu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hardDisk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("itemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("itemTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("osId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("processor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("purchasePrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int?>("ramSize")
                        .HasColumnType("int");

                    b.Property<decimal>("salesPrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("screenReslution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("screenSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("weight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("itemId");

                    b.HasIndex("categoryId");

                    b.HasIndex(new[] { "itemTypeId" }, "IX_TbItems_ItemTypeId");

                    b.HasIndex(new[] { "osId" }, "IX_TbItems_OsId");

                    b.ToTable("TbItems");
                });

            modelBuilder.Entity("LaptopMart.Models.ItemDiscount", b =>
                {
                    b.Property<int>("itemDiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("discountPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.HasKey("itemDiscountId");

                    b.HasIndex(new[] { "itemId" }, "IX_TbItemDiscount_ItemId");

                    b.ToTable("TbItemDiscount");
                });

            modelBuilder.Entity("LaptopMart.Models.ItemImage", b =>
                {
                    b.Property<int>("imageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("imageName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.HasKey("imageId");

                    b.HasIndex("itemId");

                    b.ToTable("TbItemImages");
                });

            modelBuilder.Entity("LaptopMart.Models.ItemType", b =>
                {
                    b.Property<int>("itemTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("currentState")
                        .HasColumnType("int");

                    b.Property<string>("imageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("itemTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("itemTypeId");

                    b.ToTable("TbItemTypes");
                });

            modelBuilder.Entity("LaptopMart.Models.MyApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("LaptopMart.Models.OS", b =>
                {
                    b.Property<int>("osId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("currentState")
                        .HasColumnType("int");

                    b.Property<string>("imageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("osName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("showInHomePage")
                        .HasColumnType("bit");

                    b.Property<string>("updatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("osId");

                    b.ToTable("TbOs");
                });

            modelBuilder.Entity("LaptopMart.Models.Order", b =>
                {
                    b.Property<int>("orderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("orderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("payementId")
                        .HasColumnType("int");

                    b.Property<int>("shippingInfoId")
                        .HasColumnType("int");

                    b.Property<decimal>("totalOrderPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("totalOrderQty")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("orderId");

                    b.HasIndex("payementId");

                    b.HasIndex("shippingInfoId");

                    b.HasIndex("userId");

                    b.ToTable("Tb_Orders");
                });

            modelBuilder.Entity("LaptopMart.Models.OrderItem", b =>
                {
                    b.Property<int>("orderId")
                        .HasColumnType("int");

                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.Property<int>("totalPrice")
                        .HasColumnType("int");

                    b.Property<int>("totalQty")
                        .HasColumnType("int");

                    b.HasKey("orderId", "itemId");

                    b.HasIndex("itemId");

                    b.ToTable("Tb_OrderItem");
                });

            modelBuilder.Entity("LaptopMart.Models.Payement", b =>
                {
                    b.Property<int>("payementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("payementType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("payementId");

                    b.ToTable("Tb_Payement");
                });

            modelBuilder.Entity("LaptopMart.Models.PurchaseInvoice", b =>
                {
                    b.Property<int>("invoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("invoiceDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("supplierId")
                        .HasColumnType("int");

                    b.HasKey("invoiceId");

                    b.HasIndex("supplierId");

                    b.ToTable("TbPurchaseInvoices");
                });

            modelBuilder.Entity("LaptopMart.Models.PurchaseInvoiceItem", b =>
                {
                    b.Property<int>("invoiceItemId")
                        .HasColumnType("int");

                    b.Property<int>("invoiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("invoicePrice")
                        .HasColumnType("decimal(8,4)");

                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.Property<string>("notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("qty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("invoiceItemId");

                    b.HasIndex("invoiceId");

                    b.HasIndex("itemId");

                    b.ToTable("TbPurchaseInvoiceItems");
                });

            modelBuilder.Entity("LaptopMart.Models.ShippingInfo", b =>
                {
                    b.Property<int>("shippingInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeptNo")
                        .HasColumnType("int");

                    b.Property<string>("city")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("shippingInfoId");

                    b.HasIndex("userId");

                    b.ToTable("Tb_ShippingInfo");
                });

            modelBuilder.Entity("LaptopMart.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SupplierId")
                        .HasName("PK_TbSupplier");

                    b.ToTable("TbSuppliers");
                });

            modelBuilder.Entity("LaptopMart.Models.VwItem", b =>
                {
                    b.Property<int>("categoryId")
                        .HasColumnType("int");

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("currentState")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gpu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hardDisk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.Property<string>("itemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("itemTypeId")
                        .HasColumnType("int");

                    b.Property<string>("itemTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("osId")
                        .HasColumnType("int");

                    b.Property<string>("osName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("processor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("purchasePrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int?>("ramSize")
                        .HasColumnType("int");

                    b.Property<decimal>("salesPrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("screenReslution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("screenSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("weight")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("VwItems");
                });

            modelBuilder.Entity("LaptopMart.Models.VwItemCategory", b =>
                {
                    b.Property<int>("categoryId")
                        .HasColumnType("int");

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("imageName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.Property<string>("itemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("purchasePrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("salesPrice")
                        .HasColumnType("decimal(8,2)");

                    b.ToView("VwItemCategories");
                });

            modelBuilder.Entity("LaptopMart.Models.VwItemsOutOfInvoice", b =>
                {
                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("invoicePrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("itemName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("purchasePrice")
                        .HasColumnType("decimal(8,2)");

                    b.ToView("VwItemsOutOfInvoices");
                });

            modelBuilder.Entity("LaptopMart.Models.VwSalesInvoice", b =>
                {
                    b.Property<Guid>("customerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("deliveryDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("deliveryManId")
                        .HasColumnType("int");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("invoiceDate")
                        .HasColumnType("datetime");

                    b.Property<int>("invoiceId")
                        .HasColumnType("int");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("notes")
                        .HasColumnType("nvarchar(max)");

                    b.ToView("VwSalesInvoices");
                });

            modelBuilder.Entity("LaptopMart.Models.customerItem", b =>
                {
                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.Property<int>("customerId")
                        .HasColumnType("int");

                    b.HasKey("itemId", "customerId");

                    b.HasIndex(new[] { "customerId" }, "IX_TbCustomerItems_CustomerId");

                    b.ToTable("TbCustomerItems");
                });

            modelBuilder.Entity("LaptopMart.Models.salesInvoice", b =>
                {
                    b.Property<int>("invoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<DateTime>("createdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("('0001-01-01T00:00:00.0000000')");

                    b.Property<int>("currentState")
                        .HasColumnType("int");

                    b.Property<Guid>("customerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("deliveryDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("deliveryManId")
                        .HasColumnType("int");

                    b.Property<DateTime>("invoiceDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("invoiceId");

                    b.ToTable("TbSalesInvoices");
                });

            modelBuilder.Entity("LaptopMart.Models.salesInvoiceItem", b =>
                {
                    b.Property<int>("invoiceItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("invoiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("invoicePrice")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.Property<string>("notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("qty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("invoiceItemId");

                    b.HasIndex("invoiceId");

                    b.HasIndex("itemId");

                    b.ToTable("TbSalesInvoiceItems");
                });

            modelBuilder.Entity("LaptopMart.Models.slider", b =>
                {
                    b.Property<int>("sliderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("imageName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("sliderId");

                    b.ToTable("TbSlider");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LaptopMart.Models.BusinessInfo", b =>
                {
                    b.HasOne("LaptopMart.Models.Customer", "cutomer")
                        .WithOne("businessInfo")
                        .HasForeignKey("LaptopMart.Models.BusinessInfo", "customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cutomer");
                });

            modelBuilder.Entity("LaptopMart.Models.Item", b =>
                {
                    b.HasOne("LaptopMart.Models.Category", "category")
                        .WithMany("items")
                        .HasForeignKey("categoryId")
                        .HasConstraintName("FK_TbItems_TbCategories")
                        .IsRequired();

                    b.HasOne("LaptopMart.Models.ItemType", "itemType")
                        .WithMany("items")
                        .HasForeignKey("itemTypeId")
                        .HasConstraintName("FK_TbItems_TbItemTypes");

                    b.HasOne("LaptopMart.Models.OS", "os")
                        .WithMany("items")
                        .HasForeignKey("osId")
                        .HasConstraintName("FK_TbItems_TbOs");

                    b.Navigation("category");

                    b.Navigation("itemType");

                    b.Navigation("os");
                });

            modelBuilder.Entity("LaptopMart.Models.ItemDiscount", b =>
                {
                    b.HasOne("LaptopMart.Models.Item", "item")
                        .WithMany("itemDiscounts")
                        .HasForeignKey("itemId")
                        .HasConstraintName("FK_TbItemDiscounts_TbItems")
                        .IsRequired();

                    b.Navigation("item");
                });

            modelBuilder.Entity("LaptopMart.Models.ItemImage", b =>
                {
                    b.HasOne("LaptopMart.Models.Item", "item")
                        .WithMany("itemImages")
                        .HasForeignKey("itemId")
                        .HasConstraintName("FK_TbItemImages_TbItems")
                        .IsRequired();

                    b.Navigation("item");
                });

            modelBuilder.Entity("LaptopMart.Models.Order", b =>
                {
                    b.HasOne("LaptopMart.Models.Payement", "payement")
                        .WithMany()
                        .HasForeignKey("payementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaptopMart.Models.ShippingInfo", "shippingInfo")
                        .WithMany()
                        .HasForeignKey("shippingInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaptopMart.Models.MyApplicationUser", "user")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("payement");

                    b.Navigation("shippingInfo");

                    b.Navigation("user");
                });

            modelBuilder.Entity("LaptopMart.Models.OrderItem", b =>
                {
                    b.HasOne("LaptopMart.Models.Item", "item")
                        .WithMany("OrderItems")
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaptopMart.Models.Order", "order")
                        .WithMany("orderItems")
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("item");

                    b.Navigation("order");
                });

            modelBuilder.Entity("LaptopMart.Models.PurchaseInvoice", b =>
                {
                    b.HasOne("LaptopMart.Models.Supplier", "supplier")
                        .WithMany("purchaseInvoices")
                        .HasForeignKey("supplierId")
                        .HasConstraintName("FK_TbPurchaseInvoices_TbSuppliers")
                        .IsRequired();

                    b.Navigation("supplier");
                });

            modelBuilder.Entity("LaptopMart.Models.PurchaseInvoiceItem", b =>
                {
                    b.HasOne("LaptopMart.Models.PurchaseInvoice", "invoice")
                        .WithMany("purchaseInvoiceItems")
                        .HasForeignKey("invoiceId")
                        .HasConstraintName("FK_TbPurchaseInvoiceItems_TbPurchaseInvoices")
                        .IsRequired();

                    b.HasOne("LaptopMart.Models.Item", "item")
                        .WithMany("purchaseInvoiceItems")
                        .HasForeignKey("itemId")
                        .HasConstraintName("FK_TbPurchaseInvoiceItems_TbItems")
                        .IsRequired();

                    b.Navigation("invoice");

                    b.Navigation("item");
                });

            modelBuilder.Entity("LaptopMart.Models.ShippingInfo", b =>
                {
                    b.HasOne("LaptopMart.Models.MyApplicationUser", "user")
                        .WithMany("shippingInfoList")
                        .HasForeignKey("userId");

                    b.Navigation("user");
                });

            modelBuilder.Entity("LaptopMart.Models.customerItem", b =>
                {
                    b.HasOne("LaptopMart.Models.Customer", "customer")
                        .WithMany("customerItems")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaptopMart.Models.Item", "item")
                        .WithMany("customerItems")
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("item");
                });

            modelBuilder.Entity("LaptopMart.Models.salesInvoiceItem", b =>
                {
                    b.HasOne("LaptopMart.Models.salesInvoice", "invoice")
                        .WithMany("salesInvoiceItems")
                        .HasForeignKey("invoiceId")
                        .HasConstraintName("FK_TbSalesInvoiceItems_TbSalesInvoices")
                        .IsRequired();

                    b.HasOne("LaptopMart.Models.Item", "item")
                        .WithMany("salesInvoiceItems")
                        .HasForeignKey("itemId")
                        .HasConstraintName("FK_TbSalesInvoiceItems_TbItems")
                        .IsRequired();

                    b.Navigation("invoice");

                    b.Navigation("item");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LaptopMart.Models.MyApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LaptopMart.Models.MyApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaptopMart.Models.MyApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LaptopMart.Models.MyApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LaptopMart.Models.Category", b =>
                {
                    b.Navigation("items");
                });

            modelBuilder.Entity("LaptopMart.Models.Customer", b =>
                {
                    b.Navigation("businessInfo");

                    b.Navigation("customerItems");
                });

            modelBuilder.Entity("LaptopMart.Models.Item", b =>
                {
                    b.Navigation("customerItems");

                    b.Navigation("itemDiscounts");

                    b.Navigation("itemImages");

                    b.Navigation("OrderItems");

                    b.Navigation("purchaseInvoiceItems");

                    b.Navigation("salesInvoiceItems");
                });

            modelBuilder.Entity("LaptopMart.Models.ItemType", b =>
                {
                    b.Navigation("items");
                });

            modelBuilder.Entity("LaptopMart.Models.MyApplicationUser", b =>
                {
                    b.Navigation("shippingInfoList");
                });

            modelBuilder.Entity("LaptopMart.Models.OS", b =>
                {
                    b.Navigation("items");
                });

            modelBuilder.Entity("LaptopMart.Models.Order", b =>
                {
                    b.Navigation("orderItems");
                });

            modelBuilder.Entity("LaptopMart.Models.PurchaseInvoice", b =>
                {
                    b.Navigation("purchaseInvoiceItems");
                });

            modelBuilder.Entity("LaptopMart.Models.Supplier", b =>
                {
                    b.Navigation("purchaseInvoices");
                });

            modelBuilder.Entity("LaptopMart.Models.salesInvoice", b =>
                {
                    b.Navigation("salesInvoiceItems");
                });
#pragma warning restore 612, 618
        }
    }
}
